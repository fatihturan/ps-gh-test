"""
Django settings for djPine project.

Generated by 'django-admin startproject' using Django 3.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path
import os
from boto3.session import Session
from datetime import datetime
import traceback
import json
import json_log_formatter
import logging
import re

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ['DJANGO_SECRET_KEY']

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DJANGO_DEBUG', 'false').lower() == 'true'

ALLOWED_HOSTS = ['*']
CSRF_TRUSTED_ORIGINS = ['https://*.pine-sports.com', 'https://pine-sports.com']

# Application definition
SITE_ID = 1

INSTALLED_APPS = [
    'daphne',
    'channels',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sitemaps',
    'rest_framework',
    'revproxy',
    'pineproxy',
    'blog',
    'users',
    'crispy_forms',
    'froala_editor',
    'django_social_share',
    's3direct',
    'notifications',
    'django_apscheduler',
    'phonenumber_field',
    'background_task',
    'payments',
    'chat',
    'data'
]

MIDDLEWARE = [
    # 1. Security-related middleware should be first
    'django.middleware.security.SecurityMiddleware',

    # 2. Session middleware manages sessions across requests
    'django.contrib.sessions.middleware.SessionMiddleware',

    # 3. Common middleware handles various HTTP-related tasks
    'django.middleware.common.CommonMiddleware',

    # 4. CSRF middleware (currently commented out; enable if needed)
    #'django.middleware.csrf.CsrfViewMiddleware',

    # 5. Authentication middleware manages user authentication
    'django.contrib.auth.middleware.AuthenticationMiddleware',

    # 6. Message middleware enables temporary messages storage
    'django.contrib.messages.middleware.MessageMiddleware',

    # 7. Clickjacking protection middleware
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    # 8. Custom middlewares should come after standard middlewares
    'pineproxy.middlewares.push_sheet.Check_instances_up',
    'crum.CurrentRequestUserMiddleware',
    'pineproxy.middlewares.request_logs.RequestResponseLoggerMiddleware',

    # 9. Optional middlewares (currently commented out)
    'django.middleware.gzip.GZipMiddleware',
    #'htmlmin.middleware.HtmlMinifyMiddleware',
    #'pineproxy.middlewares.trailing_slash.EnforceTrailingSlashMiddleware',
]

X_FRAME_OPTIONS = 'SAMEORIGIN'
# APPEND_SLASH = True

ROOT_URLCONF = 'djPine.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'djPine.wsgi.application'
ASGI_APPLICATION = 'djPine.asgi.application'

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels.layers.InMemoryChannelLayer"
    }
}


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.environ['RDS_DB_NAME'],
            'USER': os.environ['RDS_USERNAME'],
            'PASSWORD': os.environ['RDS_PASSWORD'],
            'HOST': os.environ['RDS_HOSTNAME'],
            'PORT':os.environ['RDS_PORT'],
        }
    }

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    # {
    #     'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    # },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    # {
    #     'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    # },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/


# Amazon S3 settings
AWS_ACCESS_KEY_ID = os.environ['AWS_ACCESS_KEY_ID']
AWS_SECRET_ACCESS_KEY = os.environ['AWS_SECRET_ACCESS_KEY']
AWS_STORAGE_BUCKET_NAME = os.environ['AWS_STORAGE_BUCKET_NAME']
AWS_DJANGO_STATIC_BUCKET = os.environ.get('AWS_DJANGO_STATIC_BUCKET')
AWS_REGION = 'us-west-2'
AWS_S3_OBJECT_PARAMETERS = {'CacheControl': 'max-age=86400'}
AWS_DEFAULT_ACL = 'public-read'


AWS_DJANGO_STATIC_BUCKET = os.environ.get('AWS_DJANGO_STATIC_BUCKET')
AWS_S3_CUSTOM_DOMAIN = '%s.s3.amazonaws.com' % AWS_DJANGO_STATIC_BUCKET

AWS_LOCATION = 'static'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]

# Vite configuration for frontend development
VITE_APP_DIR = os.path.join(BASE_DIR, 'frontend')

if DEBUG:
    VITE_DEV_MODE = True
    VITE_DEV_SERVER_URL = 'http://localhost:3000'
else:
    VITE_DEV_MODE = False
    VITE_DEV_SERVER_URL = ''


STATIC_URL = 'https://%s/%s/' % (AWS_S3_CUSTOM_DOMAIN, AWS_LOCATION)

STATICFILES_STORAGE = 'djPine.storages.StaticStorage'
DEFAULT_FILE_STORAGE = 'misc.custom_storages.MediaStore'

USER_CHARTS_BUCKET_S3 = os.environ['USER_CHARTS_BUCKET_S3']

CRISPY_TEMPLATE_PACK = 'bootstrap4'


LOGIN_REDIRECT_URL = 'stories:blog-home'
LOGIN_URL = 'login'


FROALA_EDITOR_OPTIONS = {
  'key': 'nQE2uG3B2A1H1B4C1lFa1f1PVWEd2Fa1XHTHh1THMMb1NCg1tA2B2C2C1C5G1E1F1H4C11==',
}

FROALA_EDITOR_THIRD_PARTY = ('embedlyBtn', 'embedly')

# The region of your bucket, more info:
# http://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region
AWS_S3_REGION_NAME = 'us-west-2'

# The endpoint of your bucket, more info:
# http://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region
AWS_S3_ENDPOINT_URL = 'https://s3.us-west-2.amazonaws.com'

S3DIRECT_DESTINATIONS = {
    'zip_store_destination': {
        # "key" [required] The location to upload file
        #       1. String: folder path to upload to
        #       2. Function: generate folder path + filename using a function  
        'key': 'datafiles/',
        'allow_existence_optimization': False,
        },
    'line_file_store_destination': {
        # "key" [required] The location to upload file
        #       1. String: folder path to upload to
        #       2. Function: generate folder path + filename using a function  
        'key': 'linefiles/',
        'allow_existence_optimization': False,
        },
}


#SMTP Configuration

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = os.environ['EMAIL_HOST_USER']
EMAIL_HOST_PASSWORD = os.environ['EMAIL_HOST_PASSWORD']

print("EMAIL HOST USER: ", EMAIL_HOST_USER)
print("EMAIL HOST PASS: ", EMAIL_HOST_PASSWORD)

#Logger
# def skip_log_requests(record):
#     try:
#         if 'basehttp' in str(record.args) or 'HTTPStatus.BAD_REQUEST' in str(record.args) or 'Method Not Allowed' in str(record.args) or record.args[0].startswith('GET /') or record.args[0].startswith('POST /') or record.args[0].startswith('StatReloader') or record.args[0].startswith('PosixPath') or record.args[0].startswith('Not Found') or record.args[0].startswith('Internal Server Error'):  # filter whatever you want
#             return False
#         return True
#     except:
#         return True

# def add_basehttp_log_requests(record):
#     try:
#         if 'basehttp' in str(record.args) or record.args[0].startswith('GET /') or record.args[0].startswith('POST /'):  # filter whatever you want
#             return True
#         return False
#     except:
#         return False

class CustomisedJSONFormatter(json_log_formatter.JSONFormatter):
    def json_record(self, message: str, extra: dict, record: logging.LogRecord) -> dict:
        #TODO - this is hacky to format requestlogs package
        if 'execution_time' and 'ip_address' in message:
            message = json.loads(message)
            message['level'] = record.levelname
            if message.get('response') and message['response'].get('status_code'):
                status = message['response']['status_code']
                if 400 <= status <= 499:
                    message['level'] = 'WARN'
                elif 500 <= status <= 599:
                    message['level'] = 'ERROR'

            return message

        extra['message'] = message
        extra['level'] = record.levelname

        return extra
     
class SimpleJSONFormatter():

    def format(self, record):
        
        content = {
            'level':record.levelname,
            'message':record.getMessage(),
            'time': datetime.fromtimestamp(record.created).isoformat()
        }

        if record.exc_info:
            content['exception'] = repr(record.exc_info[1]) 
            content['trace'] = traceback.format_tb(record.exc_info[2],limit=-5)
            traceback.print_tb(record.exc_info[2],limit=-5)
            print(repr(record.exc_info[1]) )

        return json.dumps(content)

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'json' : {
            '()': CustomisedJSONFormatter
        },
        'simple': {
            '()': SimpleJSONFormatter
        },     
    },
    'handlers': {
        'console-json': {
            'class': 'logging.StreamHandler',
            'formatter': 'json'
        },
        'console-simple': {
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
    },
    'loggers': {
        'json': {
            'handlers': ['console-json'],
            'level': os.getenv('DJANGO_LOG_LEVEL', 'INFO'),
            'propagate': False,
        },
        'django': {
            'handlers': ['console-simple'],
            'level': 'INFO',
            'propagate': True,
        },
        'django.server': {
            'handlers': ['console-simple'],
            'level': 'ERROR',
            'propagate': False,
        },
        'django.request': {
            'handlers': ['console-simple'],
            'level': 'ERROR',
            'propagate': False,
        }
    },
}

#chatrs s3 path
CHARTS_URL = 'https://'+USER_CHARTS_BUCKET_S3+'.s3-'+AWS_REGION+'.amazonaws.com/charts/'

# #Stripe
STRIPE_PUBLISHABLE_KEY = os.environ['STRIPE_PUBLISHABLE_KEY']
STRIPE_SECRET_KEY = os.environ['STRIPE_SECRET_KEY']
#stripe webhook sectet
#STRIPE_ENDPOINT_SECRET = os.environ['STRIPE_ENDPOINT_WEBHOOK_SECRET']
DOMAIN_URL = os.environ['DOMAIN_URL']

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
OPENAI_API_KEY = os.environ['OPENAI_API_KEY']

#Supabase
SUPABASE_URL = os.environ['SUPABASE_URL']
SUPABASE_API_KEY = os.environ['SUPABASE_API_KEY']

#Anthropic
ANTHROPIC_API_KEY = os.environ['ANTHROPIC_API_KEY']

#Gemini
GEMINI_API_KEY = os.environ['GEMINI_API_KEY']

#DeepSeek
DEEPSEEK_API_KEY = os.environ['DEEPSEEK_API_KEY']

#Perplexity
PERPLEXITY_API_KEY = os.environ['PERPLEXITY_API_KEY']

SERP_API_KEY = os.environ['SERP_API_KEY']

# In settings.py
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'chat-views',
    }
}

# Cache timeout in seconds (e.g. 5 minutes)
CACHE_TIMEOUTS = {
    'EVENTS': 60 * 60 * 3,  # 3 hours
    'LEAGUES': 60 * 60 * 24,  # 24 hours
    'MARKETSELECTION_DETAIL': 60 * 60 * 3,  # 15 minutes
    'EVENT_DETAIL': 60 * 60 * 24,  # 24 hours
    'PRICES': 60 * 3,  # 3 minutes
    'MARKETSELECTION_METADATA': 60 * 60 * 3,  # 3 hours
    'PLAYERS': 60 * 60 * 24,  # 24 hours
}